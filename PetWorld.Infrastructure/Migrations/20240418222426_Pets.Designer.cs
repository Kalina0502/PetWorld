// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetWorld.Infrastructure.Data;

#nullable disable

namespace PetWorld.Infrastructure.Migrations
{
    [DbContext(typeof(PetWorldDbContext))]
    [Migration("20240418222426_Pets")]
    partial class Pets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89cf4f12-3d67-4b10-8ab6-dbb21c31c44c",
                            Email = "agent@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "agent@mail.com",
                            NormalizedUserName = "agent@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEC94qvpEaftVbSKHoXlc5Myebol9sqh2SE+62Sy6h3V5i/nZC8qnde43wTcxSin6WA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6db907cf-0659-4d4e-bf89-418288969535",
                            TwoFactorEnabled = false,
                            UserName = "agent@mail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b754c98c-f828-4f4c-9367-1da59e9550aa",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFhSOaAkjfsq4M5Xsw1s16LJBqHFlajb5BAfahycd97JOAaSIYi6mlqpMAZfgR2TXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94f8a6ef-1a8d-46f3-b3e2-055b933dc896",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.AdoptionAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Pet identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasComment("Pet age");

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent identifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Pet city");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Pet for adopting");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Pet image url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Pet name");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int")
                        .HasComment("Species identifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User id of the pet");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionAnimals");

                    b.HasComment("Addoption description");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 3,
                            AgentId = 1,
                            City = "Varna",
                            Description = "Friendly dog looking for a forever home.",
                            ImageUrl = "https://imgs.search.brave.com/6_mK4szCUhPtgYpWPnxvThzz8t1gjuxplafy-36PLLo/rs:fit:860:0:0/g:ce/aHR0cHM6Ly9tZWRp/YS5pc3RvY2twaG90/by5jb20vaWQvMTMw/MTgzOTExMi9waG90/by9wdXBweS13aXRo/LXRpbHRlZC1oZWFk/LWFuZC1jcm9zc2Vk/LXBhd3MtbHlpbmct/b24tc29mYS5qcGc_/cz02MTJ4NjEyJnc9/MCZrPTIwJmM9ak1x/TllGMXRPZGpIa2pP/QjZnTGdLbFc0V3I1/OGdzUWJIYnI4MnBK/Q0dpRT0",
                            Name = "Fluffy",
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 2,
                            AgentId = 1,
                            City = "Sofia",
                            Description = "Playful cat in need of a loving family.",
                            ImageUrl = "https://imgs.search.brave.com/yUi94EMJUyOlxg2hDIkB884GABSL4Cy8XSt8L314Hqg/rs:fit:860:0:0/g:ce/aHR0cHM6Ly9pbWcu/ZnJlZXBpay5jb20v/ZnJlZS1waG90by9w/b3J0cmFpdC1hZG9y/YWJsZS1kb21lc3Rp/Yy1jYXRfMjMtMjE0/OTE2NzA4OC5qcGc_/c2l6ZT02MjYmZXh0/PWpwZw",
                            Name = "Whiskers",
                            SpeciesId = 2
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Agent identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Agent's phone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Agents");

                    b.HasComment("PetWorld agent");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumber = "+359888888888",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.GenderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("GenderType identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenderTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgentId = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            AgentId = 1,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            AgentId = 1,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Groomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Groomer identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Groomer age");

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Groomer short description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Groomer name");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Groomers");

                    b.HasComment("Groomer description");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 23,
                            AgentId = 1,
                            Description = "Professional groomers providing high-quality grooming services.",
                            Name = "Kalina Yordanova"
                        },
                        new
                        {
                            Id = 2,
                            Age = 30,
                            AgentId = 1,
                            Description = "Dedicated groomers offering personalized grooming sessions for your pets.",
                            Name = "Constantine Nenov"
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            AgentId = 1,
                            Description = "Experienced groomers who love pampering your furry friends.",
                            Name = "Rosica Yordanova"
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.GroomingReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("Check-out date");

                    b.Property<int>("GroomerId")
                        .HasColumnType("int");

                    b.Property<int>("GroomingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasComment("Pet");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Check-in date");

                    b.HasKey("Id");

                    b.HasIndex("GroomerId");

                    b.HasIndex("GroomingTypeId");

                    b.HasIndex("PetId");

                    b.ToTable("GroomingReservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new DateTime(2024, 4, 24, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            GroomerId = 1,
                            GroomingTypeId = 1,
                            PetId = 1,
                            StartTime = new DateTime(2024, 4, 24, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new DateTime(2024, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            GroomerId = 2,
                            GroomingTypeId = 1,
                            PetId = 3,
                            StartTime = new DateTime(2024, 4, 28, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.GroomingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("ServiceType identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Name of the service");

                    b.HasKey("Id");

                    b.ToTable("GroomingTypes");

                    b.HasComment("Service Type description");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bath and Brush"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Haircut"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nail Trim"
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Pet identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Pet age");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Pet description");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasComment("Pet gender");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Pet image url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Pet name");

                    b.Property<int>("PetOwnerId")
                        .HasColumnType("int")
                        .HasComment("Pet owner");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int")
                        .HasComment("Species identifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("PetOwnerId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Pets");

                    b.HasComment("Pet description");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 5,
                            City = "Varna",
                            Description = "Friendly dog",
                            GenderId = 1,
                            ImageUrl = "",
                            Name = "Buddy",
                            PetOwnerId = 1,
                            SpeciesId = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 3,
                            City = "Sofia",
                            Description = "Playful cat",
                            GenderId = 2,
                            ImageUrl = "",
                            Name = "Whiskers",
                            PetOwnerId = 1,
                            SpeciesId = 2
                        },
                        new
                        {
                            Id = 3,
                            Age = 2,
                            City = "Burgas",
                            Description = "Talkative bird",
                            GenderId = 2,
                            ImageUrl = "",
                            Name = "Polly",
                            PetOwnerId = 1,
                            SpeciesId = 3
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.PetOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Pet owner identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Pet owner age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasComment("Pet Owner email");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("PetOwnerFirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Pet owner first name");

                    b.Property<string>("PetOwnerLastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Pet owner last name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Pet owner phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("PetOwners");

                    b.HasComment("Pet Owner");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 30,
                            Email = "john@example.com",
                            GenderId = 1,
                            PetOwnerFirstName = "John",
                            PetOwnerLastName = "Doe",
                            PhoneNumber = "1234567890",
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Room identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent identifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasComment("Room description");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgentId = 1,
                            IsAvailable = true,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgentId = 1,
                            IsAvailable = true,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgentId = 1,
                            IsAvailable = false,
                            RoomTypeId = 3
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.RoomReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Reservation identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2")
                        .HasComment("Check-in date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2")
                        .HasComment("Check-out date");

                    b.Property<bool>("IncludesFood")
                        .HasColumnType("bit")
                        .HasComment("Includes food");

                    b.Property<bool>("IncludesWalk")
                        .HasColumnType("bit")
                        .HasComment("Includes walk");

                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasComment("Pet");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasComment("Room");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomReservations");

                    b.HasComment("Reservation description");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckInDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IncludesFood = true,
                            IncludesWalk = true,
                            PetId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            CheckInDate = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckOutDate = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IncludesFood = false,
                            IncludesWalk = true,
                            PetId = 2,
                            RoomId = 2
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("RoomType identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("RoomType");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dog Room"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cat Room"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bird Room"
                        });
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Species identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Species Name");

                    b.HasKey("Id");

                    b.ToTable("Species");

                    b.HasComment("Species description");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dog"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bird"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.AdoptionAnimal", b =>
                {
                    b.HasOne("PetWorld.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetWorld.Infrastructure.Data.Models.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Agent");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Agent", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Groomer", b =>
                {
                    b.HasOne("PetWorld.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.GroomingReservation", b =>
                {
                    b.HasOne("PetWorld.Infrastructure.Data.Models.Groomer", "Groomer")
                        .WithMany()
                        .HasForeignKey("GroomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetWorld.Infrastructure.Data.Models.GroomingType", "GroomingType")
                        .WithMany()
                        .HasForeignKey("GroomingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetWorld.Infrastructure.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groomer");

                    b.Navigation("GroomingType");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Pet", b =>
                {
                    b.HasOne("PetWorld.Infrastructure.Data.Models.GenderType", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetWorld.Infrastructure.Data.Models.PetOwner", "Owner")
                        .WithMany()
                        .HasForeignKey("PetOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetWorld.Infrastructure.Data.Models.Species", "Species")
                        .WithMany("Pets")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Owner");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.PetOwner", b =>
                {
                    b.HasOne("PetWorld.Infrastructure.Data.Models.GenderType", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Room", b =>
                {
                    b.HasOne("PetWorld.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetWorld.Infrastructure.Data.Models.RoomType", null)
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.RoomReservation", b =>
                {
                    b.HasOne("PetWorld.Infrastructure.Data.Models.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetWorld.Infrastructure.Data.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("PetWorld.Infrastructure.Data.Models.Species", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
